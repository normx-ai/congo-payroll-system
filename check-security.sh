#!/bin/bash

# Script de v√©rification de s√©curit√© pour NORM_PAIE
# Version: 1.0.0

echo "======================================"
echo "üîê V√©rification de S√©curit√© NORM_PAIE"
echo "======================================"
echo ""

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Compteurs
ISSUES=0
WARNINGS=0

echo "1Ô∏è‚É£  V√©rification des fichiers .env..."
echo "----------------------------------------"

# V√©rifier si .env est dans Git
if git ls-files | grep -q "\.env$"; then
    echo -e "${RED}‚ùå CRITIQUE: Un fichier .env est track√© par Git!${NC}"
    git ls-files | grep "\.env$"
    ((ISSUES++))
else
    echo -e "${GREEN}‚úÖ Aucun fichier .env n'est track√© par Git${NC}"
fi

# V√©rifier la pr√©sence de .env dans .gitignore
if grep -q "^\.env" .gitignore 2>/dev/null || grep -q "^\.env" backend/.gitignore 2>/dev/null; then
    echo -e "${GREEN}‚úÖ .env est dans .gitignore${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  AVERTISSEMENT: .env devrait √™tre dans .gitignore${NC}"
    ((WARNINGS++))
fi

# V√©rifier si .env.example existe
if [ -f "backend/.env.example" ]; then
    echo -e "${GREEN}‚úÖ .env.example existe${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  AVERTISSEMENT: .env.example manquant${NC}"
    ((WARNINGS++))
fi

echo ""
echo "2Ô∏è‚É£  Recherche de secrets potentiels dans le code..."
echo "----------------------------------------"

# Rechercher des mots de passe hardcod√©s
HARDCODED_PASSWORDS=$(grep -r "password.*=.*['\"].*['\"]" --include="*.ts" --include="*.tsx" --include="*.js" --exclude-dir=node_modules --exclude-dir=.next --exclude="*.test.*" --exclude="*.spec.*" backend/src 2>/dev/null | grep -v "password.*:.*string" | wc -l)

if [ "$HARDCODED_PASSWORDS" -gt 0 ]; then
    echo -e "${RED}‚ùå CRITIQUE: $HARDCODED_PASSWORDS mot(s) de passe potentiel(s) trouv√©(s) dans le code${NC}"
    echo "   Fichiers concern√©s:"
    grep -r "password.*=.*['\"].*['\"]" --include="*.ts" --include="*.tsx" --include="*.js" --exclude-dir=node_modules --exclude-dir=.next --exclude="*.test.*" --exclude="*.spec.*" backend/src 2>/dev/null | grep -v "password.*:.*string" | cut -d: -f1 | uniq | head -5
    ((ISSUES++))
else
    echo -e "${GREEN}‚úÖ Aucun mot de passe hardcod√© d√©tect√©${NC}"
fi

# Rechercher des cl√©s API potentielles
API_KEYS=$(grep -r "api.*key.*=.*['\"]" --include="*.ts" --include="*.tsx" --include="*.js" --exclude-dir=node_modules --exclude-dir=.next backend/src 2>/dev/null | grep -v "process.env" | wc -l)

if [ "$API_KEYS" -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  AVERTISSEMENT: $API_KEYS cl√©(s) API potentielle(s) trouv√©e(s)${NC}"
    ((WARNINGS++))
else
    echo -e "${GREEN}‚úÖ Aucune cl√© API hardcod√©e d√©tect√©e${NC}"
fi

echo ""
echo "3Ô∏è‚É£  V√©rification des console.log..."
echo "----------------------------------------"

# Compter les console.log
CONSOLE_LOGS=$(find backend/src -name "*.ts" -o -name "*.tsx" | xargs grep -l "console\.\(log\|error\|warn\)" 2>/dev/null | wc -l)

if [ "$CONSOLE_LOGS" -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  AVERTISSEMENT: $CONSOLE_LOGS fichier(s) avec console.log${NC}"
    echo "   Consid√©rez l'utilisation d'un syst√®me de logging appropri√©"
    ((WARNINGS++))
else
    echo -e "${GREEN}‚úÖ Aucun console.log d√©tect√©${NC}"
fi

echo ""
echo "4Ô∏è‚É£  V√©rification de l'historique Git..."
echo "----------------------------------------"

# V√©rifier l'historique pour des .env committ√©s
ENV_IN_HISTORY=$(git log --all --full-history -- "**/.env" 2>/dev/null | wc -l)

if [ "$ENV_IN_HISTORY" -gt 0 ]; then
    echo -e "${RED}‚ùå CRITIQUE: Des fichiers .env ont √©t√© trouv√©s dans l'historique Git${NC}"
    echo "   Consid√©rez de nettoyer l'historique avec git-filter-branch ou BFG Repo-Cleaner"
    ((ISSUES++))
else
    echo -e "${GREEN}‚úÖ Aucun .env dans l'historique Git${NC}"
fi

echo ""
echo "5Ô∏è‚É£  V√©rification des permissions..."
echo "----------------------------------------"

# V√©rifier les permissions du fichier .env
if [ -f "backend/.env" ]; then
    PERM=$(stat -c "%a" backend/.env 2>/dev/null || stat -f "%A" backend/.env 2>/dev/null)
    if [ "$PERM" = "644" ] || [ "$PERM" = "600" ]; then
        echo -e "${GREEN}‚úÖ Permissions de .env correctes ($PERM)${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  AVERTISSEMENT: Permissions de .env trop permissives ($PERM)${NC}"
        echo "   Recommand√©: chmod 600 backend/.env"
        ((WARNINGS++))
    fi
fi

echo ""
echo "======================================"
echo "üìä R√âSUM√â"
echo "======================================"

if [ $ISSUES -eq 0 ] && [ $WARNINGS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Aucun probl√®me de s√©curit√© d√©tect√©!${NC}"
elif [ $ISSUES -eq 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  $WARNINGS avertissement(s) d√©tect√©(s)${NC}"
    echo "   V√©rifiez les points ci-dessus pour am√©liorer la s√©curit√©"
else
    echo -e "${RED}‚ùå $ISSUES probl√®me(s) critique(s) et $WARNINGS avertissement(s) d√©tect√©(s)${NC}"
    echo "   ACTION REQUISE: Corrigez les probl√®mes critiques imm√©diatement!"
fi

echo ""
echo "Pour plus de d√©tails, consultez SECURITY_GUIDE.md"
echo ""

exit $ISSUES